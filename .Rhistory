fill = years_taken,
missing_fill = 0) %>%
predict(models, .)
## This is a script used to explore the functions and basic usage of Healthcareai for my (Jack Lovell) own
## eductation. The script is adapted from the tutorial at https://docs.healthcare.ai/articles/site_only/best_levels.html#appendix-data-generation
new_patient <- tibble(patient_id = 999, pregnancies = 0, plasma_glucose = 94,
diastolic_bp = 69, skinfold = 24, insulin = NA,
weight_class = "normal", pedigree = 0.5, age = 22)
new_meds <- tibble(patient_id = rep(999, 2),
medication = c("nexium", "metoprolol"),
years_taken = c(.25, 2.4))
new_patient_med_duration <-
add_best_levels(d = new_patient,
longsheet = new_meds,
id = patient_id,
groups = medication,
outcome = diabetes,
n_levels = 2,
levels = pima_diabetes_med_duration,
fill = years_taken,
missing_fill = 0)
## This is a script used to explore the functions and basic usage of Healthcareai for my (Jack Lovell) own
## eductation. The script is adapted from the tutorial at https://docs.healthcare.ai/articles/site_only/best_levels.html#appendix-data-generation
pima_diabetes_med_duration <-
add_best_levels(
d = pima_diabetes,
longsheet = pima_meds,
id = patient_id,
groups = medication,
outcome = diabetes,
n_levels = 2,
### The following arguments are passed to the `pivot` function.
# The name of the column in longsheet to be used to fill new columns
fill = years_taken,
# The value to use for observations that lack a best level
missing_fill = 0)
glimpse(pima_diabetes_med_duration)
new_patient <- tibble(patient_id = 999, pregnancies = 0, plasma_glucose = 94,
diastolic_bp = 69, skinfold = 24, insulin = NA,
weight_class = "normal", pedigree = 0.5, age = 22)
new_meds <- tibble(patient_id = rep(999, 2),
medication = c("nexium", "metoprolol"),
years_taken = c(.25, 2.4))
new_patient_med_duration <-
add_best_levels(d = new_patient,
longsheet = new_meds,
id = patient_id,
groups = medication,
outcome = diabetes,
n_levels = 2,
levels = pima_diabetes_med_duration,
fill = years_taken,
missing_fill = 0)
glimpse(new_patient_med_duration)
models <- machine_learn(pima_diabetes_med_duration, patient_id, outcome = diabetes,
models = "xgb", tune = FALSE)
add_best_levels(d = new_patient,
longsheet = new_meds,
id = patient_id,
groups = medication,
outcome = diabetes,
n_levels = 2,
levels = models,
fill = years_taken,
missing_fill = 0) %>%
predict(models, .)
View(models)
install.packages(DBI)
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
library(healthcareai)
library(DBI)
my_con <- build_connection_string(server = "HCS-GM0004",
database = "SAM")
con <- dbConnect(odbc::odbc(), .connection_string = my_con)
install.packages('OBDC')
con <- dbConnect(odbc::odbc(), .connection_string = my_con)
install.packages('obdc')
install.packages("obdc")
setRepositories()
devtools::install_github("rstats-db/odbc")
devtools::install_github("rstats-db/odbc")
install.packages("odbc")
library(healthcareai)
library(DBI)
my_con <- build_connection_string(server = "HCS-GM0004",
database = "SAM")
con <- dbConnect(odbc::odbc(), .connection_string = my_con)
library(healthcareai)
library(DBI)
library(odbc)
my_con <- build_connection_string(server = "HCS-GM0004",
database = "SAM")
con <- dbConnect(odbc::odbc(), .connection_string = my_con)
?dbConnect
library(healthcareai)
library(DBI)
library(odbc)
my_con <- build_connection_string(server = "HCS-GM0004",
database = "SAM")
con <- dbConnect(odbc::odbc(), .connection_string = my_con)
install.packages(c("dplyr", "jsonlite", "knitr", "mime", "mnormt", "nlme", "rlang", "tidyr", "tidyselect", "vctrs", "yaml"))
library('healthcareai')
library('DBI')
library('odbc'')
my_con <- build_connection_string(server = "HCS-GM0004",
con <- dbConnect(odbc::odbc(), .connection_string = my_con)
library('healthcareai')
library('DBI')
library('odbc')
my_con <- build_connection_string(server = "HCS-GM0004",
database = "SAM")
con <- dbConnect(odbc::odbc(), .connection_string = my_con)
load("/Users/jacklovell/Desktop/ICPSR_21600/DS0005/21600-0005-Data.rda")
View(da21600.0005)
load("/Users/jacklovell/Desktop/ICPSR_21600/DS0006/21600-0006-Data.rda")
View(da21600.0006)
?add_best_levels
?mutate
df.train = data.frame(df$AID, df$BST90P08, df$BST90P17, df$BST90P19, df$BST90P20, df$BST90P24)
df1 = load("/Users/jacklovell/Desktop/ICPSR_21600/DS0006/21600-0006-Data.rda")
df.train = data.frame(df$AID, df$BST90P08, df$BST90P17, df$BST90P19, df$BST90P20, df$BST90P24)
View(da21600.0006)
df1 = da21600.0006
load("/Users/jacklovell/Desktop/ICPSR_21600/DS0006/21600-0006-Data.rda")
df1 = da21600.0006
df.train = data.frame(df$AID, df$BST90P08, df$BST90P17, df$BST90P19, df$BST90P20, df$BST90P24)
df1 = datat.frame(da21600.0006)
df1 = data.frame(da21600.0006)
df.train = data.frame(df$AID, df$BST90P08, df$BST90P17, df$BST90P19, df$BST90P20, df$BST90P24)
df1 = data.frame(da21600.0006)
df.train = data.frame(df1$AID, df1$BST90P08, df1$BST90P17, df1$BST90P19, df1$BST90P20, df1$BST90P24)
View(df.train)
load("/Users/jacklovell/Desktop/ICPSR_21600/DS0030/21600-0030-Data.rda")
View(da21600.0030)
load("/Users/jacklovell/Desktop/ICPSR_21600/DS0028/21600-0028-Data.rda")
View(da21600.0028)
View(df.train)
load("/Users/jacklovell/Desktop/ICPSR_21600/DS0029/21600-0029-Data.rda")
View(da21600.0029)
>split_train_test()
?split_train_test
df2 = data.frame(da21600.0028)
df1 = data.frame(da21600.0006)
df2 = data.frame(da21600.0028)
df.train_test = merge(df1, df1, by="AID")
?split_train_test
View(df.train_test)
View(df.train_test)
View(df2)
df.train_test = merge(df1, df2, by="AID")
d = split_train_test(df.train_test, outcome = 'CRP', percent_train = 0.7)
d = split_train_test(df.train_test, outcome = 'CRP', percent_train = 0.7, na.rm ="TRUE")
d = split_train_test(df.train_test, outcome = 'CRP', percent_train = 0.7)
pima_meds
View(df1)
?add_best_levels
df1 = data.frame(da21600.0006)
df2 = data.frame(da21600.0028)
df.train_test = add_best_levels(
d = df2,
longsheet = df1,
id = AID,
groups = BST90P20,
outcome = CRP,
)
# define the folder containing additional files
path_to_additional_files <- "~/Donwloads/Assingment_3_Packet/Face-Eyes sdt analysis/my_lab_3.0_additional_files"
# define the folder containing additional files
path_to_additional_files <- "~/Donwloads/Assingment_3_Packet/Face-Eyes sdt analysis/my_lab_3.0_additional_files"
library("tidyverse")
library("tidyverse")
library("gridExtra")
library("knitr")
library("png")
# define the folder containing additional files
path_to_additional_files <- "~/Donwloads/Assingment_3_Packet/Face-Eyes sdt analysis/my_lab_3.0_additional_files"
# My Individual Data
```{r broken1, echo=FALSE}
## Edit the two lines below to put in your initials
## and your data file name
myName <- "jl"
myFile <- "jl_2020_Feb_05_1123_1.csv"
df.raw <- read.csv(file.path(path_to_additional_files,
myFile))
# define the folder containing additional files
path_to_additional_files <- "my_lab_3.0_additional_files"
# My Individual Data
```{r broken1, echo=FALSE}
## Edit the two lines below to put in your initials
## and your data file name
myName <- "jl"
myFile <- "jl_2020_Feb_05_1123_1.csv"
df.raw <- read.csv(file.path(path_to_additional_files,
myFile))
View(df.raw)
install.packages("png")
install.packages("png")
View(df.raw)
df.raw <- read.csv(file.path(path_to_additional_files,
myFile))
df.raw <- read.csv(file.path(path_to_additional_files,
myFile))
df.obsv <- df.raw %>%
filter(rating.keys != "")
# change rating keys with a factor of R1, R2, etc.
mutate(rating = factor(rating.keys, levels = c(1, 2, 3, 4, 5, 6)))
mutate(rating = fct_recode(rating,
R1 = "1", R2 = "2", R3 = "3"
R4 = "4", R5 = "5", R6 = "6")) %>%
df.obsv <- df.raw %>%
filter(rating.keys != "")
# change rating keys with a factor of R1, R2, etc.
mutate(rating = factor(rating.keys, levels = c(1, 2, 3, 4, 5, 6)))
df.obsv <- df.raw %>%
filter(rating.keys != "")
# change rating keys with a factor of R1, R2, etc.
mutate(rating = factor(rating.keys, levels = c(1, 2, 3, 4, 5, 6)))
mutate(rating = fct_recode(rating,
R1 = "1", R2 = "2", R3 = "3",
R4 = "4", R5 = "5", R6 = "6")) %>%
## Now we will put the levels of Signal3 in order with new first
mutate(Signal3 = fct_relevel(Signal3, "new", "noeyes", "eyes"))%>%
## Also change level names to include s0, s1, s2
mutate(Signal3 = fct_recode(Signal3,
s0_new = "new",
s1_noeyes = "noeyes",
s2_eyes = "eyes"))
View(df.obsv)
# change rating keys with a factor of R1, R2, etc.
mutate(rating = factor(rating.keys, levels = c(1, 2, 3, 4, 5, 6)))
df.obsv <- df.raw %>%
filter(rating.keys != "") %>%
# change rating keys with a factor of R1, R2, etc.
mutate(rating = factor(rating.keys, levels = c(1, 2, 3, 4, 5, 6))) %>%
mutate(rating = fct_recode(rating,
R1 = "1", R2 = "2", R3 = "3",
R4 = "4", R5 = "5", R6 = "6")) %>%
## Now we will put the levels of Signal3 in order with new first
mutate(Signal3 = fct_relevel(Signal3, "new", "noeyes", "eyes"))%>%
## Also change level names to include s0, s1, s2
mutate(Signal3 = fct_recode(Signal3,
s0_new = "new",
s1_noeyes = "noeyes",
s2_eyes = "eyes"))
df.obsv <- df.raw %>%
filter(rating.keys != "") %>%
# change rating keys with a factor of R1, R2, etc.
mutate(rating = factor(rating.keys, levels = c(1, 2, 3, 4, 5, 6))) %>%
mutate(rating = fct_recode(rating,
R1 = "1", R2 = "2", R3 = "3",
R4 = "4", R5 = "5", R6 = "6")) %>%
## Now we will put the levels of Signal3 in order with new first
mutate(Signal3 = fct_relevel(Signal3, "new", "noeyes", "eyes"))%>%
## Also change level names to include s0, s1, s2
mutate(Signal3 = fct_recode(Signal3,
s0_new = "new",
s1_noeyes = "noeyes",
s2_eyes = "eyes"))
View(df.obsv)
df.obsv <- df.raw %>%
filter(rating.keys != "") %>%
# change rating keys with a factor of R1, R2, etc.
mutate(rating = factor(rating.keys, levels = c(1, 2, 3, 4, 5, 6))) %>%
mutate(rating = fct_recode(rating,
R1 = "1", R2 = "2", R3 = "3",
R4 = "4", R5 = "5", R6 = "6")) %>%
## Now we will put the levels of Signal3 in order with new first
mutate(Signal3 = fct_relevel(Signal3, "new", "noeyes", "eyes"))%>%
## Also change level names to include s0, s1, s2
mutate(Signal3 = fct_recode(Signal3,
s0_new = "new",
s1_noeyes = "noeyes",
s2_eyes = "eyes")) %>%
# count freq of each rating for each signal detection
count(rating, Signal3) %>%
spread(key = Signal3, value = n)
View(df.obsv)
df.obsv <- df.raw %>%
filter(rating.keys != "") %>%
# change rating keys with a factor of R1, R2, etc.
mutate(rating = factor(rating.keys, levels = c(1, 2, 3, 4, 5, 6))) %>%
mutate(rating = fct_recode(rating,
R1 = "1", R2 = "2", R3 = "3",
R4 = "4", R5 = "5", R6 = "6")) %>%
## Now we will put the levels of Signal3 in order with new first
mutate(Signal3 = fct_relevel(Signal3, "new", "noeyes", "eyes"))%>%
## Also change level names to include s0, s1, s2
mutate(Signal3 = fct_recode(Signal3,
s0_new = "new",
s1_noeyes = "noeyes",
s2_eyes = "eyes")) %>%
# count freq of each rating for each signal detection
count(rating, Signal3)
View(df.obsv)
df.obsv <- df.raw %>%
filter(rating.keys != "") %>%
# change rating keys with a factor of R1, R2, etc.
mutate(rating = factor(rating.keys, levels = c(1, 2, 3, 4, 5, 6))) %>%
mutate(rating = fct_recode(rating,
R1 = "1", R2 = "2", R3 = "3",
R4 = "4", R5 = "5", R6 = "6")) %>%
## Now we will put the levels of Signal3 in order with new first
mutate(Signal3 = fct_relevel(Signal3, "new", "noeyes", "eyes"))%>%
## Also change level names to include s0, s1, s2
mutate(Signal3 = fct_recode(Signal3,
s0_new = "new",
s1_noeyes = "noeyes",
s2_eyes = "eyes")) %>%
# count freq of each rating for each signal detection
count(rating, Signal3)%>%
spread(key = Signal3, value = n)
View(df.obsv)
?count()
df.train_test = add_best_levels(
d = df2,
longsheet = df1,
id = AID,
groups = BST90P20,
outcome = CRP,
)
df1 = data.frame(da21600.0006)
df2 = data.frame(da21600.0028)
df.train_test = add_best_levels(
d = df2,
longsheet = df1,
id = AID,
groups = BST90P20,
outcome = CRP,
)
load("/Users/jacklovell/Desktop/ICPSR_21600/DS0028/21600-0028-Data.rda")
load("/Users/jacklovell/Desktop/ICPSR_21600/DS0006/21600-0006-Data.rda")
library('healthcareai')
library('DBI')
library('odbc')
df1 = data.frame(da21600.0006)
df2 = data.frame(da21600.0028)
df.train_test = add_best_levels(
d = df2,
longsheet = df1,
id = AID,
groups = BST90P20,
outcome = CRP,
)
?impute
df1 = impute(data.frame(da21600.0006))
df2 = impute(data.frame(da21600.0028))
df.train_test = add_best_levels(
d = df2,
longsheet = df1,
id = AID,
groups = BST90P20,
outcome = CRP,
)
df.train_test = add_best_levels(
d = df2,
longsheet = df1,
id = AID,
groups = BST90P20,
outcome = CRP,
forcats::fct_explicit_na
)
df.train_test = add_best_levels(
d = df2,
longsheet = df1,
id = AID,
groups = BST90P20,
outcome = CRP
)
View(df.train_test)
?add_best_levels
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, fig.align = "center")
library("knitr")
library("png")
# My Individual Data
```{r broken1, echo=FALSE}
## Edit the two lines below to put in your initials
## and your data file name
myName <- "jl"
myFile <- "jl_2020_Feb_05_1123_1.csv"
df.raw <- read.csv(file.path(path_to_additional_files,
myFile))
df.raw <- read.csv(file.path(path_to_additional_files,
myFile))
# define the folder containing additional files
path_to_additional_files <- "my_lab_3.0_additional_files"
# My Individual Data
```{r broken1, echo=FALSE}
## Edit the two lines below to put in your initials
## and your data file name
myName <- "jl"
myFile <- "jl_2020_Feb_05_1123_1.csv"
df.raw <- read.csv(file.path(path_to_additional_files,
myFile))
df.raw <- read.csv(file.path(path_to_additional_files,
myFile))
```{r}
df.obsv <- df.raw %>%
filter(rating.keys != "") %>%
# change rating keys with a factor of R1, R2, etc.
mutate(rating = factor(rating.keys, levels = c(1, 2, 3, 4, 5, 6))) %>%
mutate(rating = fct_recode(rating,
R1 = "1", R2 = "2", R3 = "3",
R4 = "4", R5 = "5", R6 = "6")) %>%
## Now we will put the levels of Signal3 in order with new first
mutate(Signal3 = fct_relevel(Signal3, "new", "noeyes", "eyes"))%>%
## Also change level names to include s0, s1, s2
mutate(Signal3 = fct_recode(Signal3,
s0_new = "new",
s1_noeyes = "noeyes",
s2_eyes = "eyes")) %>%
# count freq of each rating for each signal detection
count(rating, Signal3)%>%
spread(key = Signal3, value = n)
View(df.obsv)
View(df.obsv)
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("lavaan")
library("psych")
library("Gifi")
library("MPsychoR")
rm(list = ls())
df <- read.csv('/Users/jacklovell/Desktop/Final Project Paper Data Sets/Disgust Data/Disgust Data.csv')
# select just the question columns
df.disg <- df %>%
# filter out the subjects who fail the catch trial
filter(Catch_response == 1) %>%
select(starts_with("Q")) %>%
select(-contains("Catch")) %>%
# remove rows with NA
na.omit()
# select just the question columns
df.disg <- df %>%
# filter out the subjects who fail the catch trial
filter(Catch_response == 1) %>%
select(starts_with("Q")) %>%
select(-contains("Catch")) %>%
# remove rows with NA
na.omit()
# select just the question columns
df_disg <- df %>%
# filter out the subjects who fail the catch trial
filter(Catch_response == 1) %>%
select(starts_with("Q")) %>%
select(-contains("Catch")) %>%
# remove rows with NA
na.omit()
View(df)
ratings <- df[ ,c(7:31)]
knotslin <- knotsGifi(ratings, type="E")
prlin <- princals(ratings, knots = knotslin, degrees =1)
prlin
prord <- princals(ratings)
prord
# extract data
opt_rating <- prord$data
# use fa from psych package
disgFA2 <- fa(opt_rating, nfactors = 2, rotate = "none", fm = "ml")
# rotated solution
disgFA2r <- fa(opt_rating, nfactors = 2, rotate = "varimax", fm = "ml")
# the par(pty = "s") code makes the graph square and
# saves the existing plot parameters
op <- par(pty = "s")
fa.plot(disgFA2, title = "Unrotated 2 Factor Solution",
xlim = c(-0.6, 0.8), ylim = c(-0.6, 0.8))
# restores the previous plot parameter settings
par(op)
op <- par(pty = "s")
fa.plot(disgFA2r, title = "Rotated 2 Factor Solution",
xlim = c(-0.4, 0.8), ylim = c(-0.4, 0.8))
par(op)
plot(prord, plot.type = "transplot",
var.subset = c(1:2, 8:9), lwd = 2)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
tinytex::install_tinytex()
setwd('~/Desktop/psyc5541')
#HW Problem 3 ---------------------------------
hw.vector  <- c(33,85,28,12,6,97,25,55,45,78)
# (a) There are two ways to index vectors that we've covered. First, using a vector of numbers. Second, using a logical vector. Change the 4th and 6th element of hw.vector to be -60 and -90 respectively. Do this first using a numeric vector (section #9 above) and call this new vector hw3an. Do it again using a logical vector (section #8) and call this vector hw3av.
hw3an <- hw.vector
hw3an[c(4,6)] <- c(-60,-90)
hw3an
hw3av <- hw.vector
hw3av[c(4,6)] <- (c(T,T)*c(-60,-90))
hw3av
# (b) In a single line of code using a logical operator & multiplication, make another vector "hw3b" that is 3 if hw.vector element <= 50 and 0 otherwise
(hw3b <- (hw.vector <= 50)*3)
# (c) In a single line of code using logical operators & vector multiplication, make vector "hw3c" whose elements = 5 if hw.vector element is between 30 and 80 and -99 otherwise. Check your answer visually with "rbind" (row bind) function
(hw3c <- (hw.vector <=80 & hw.vector >= 30)*5 )
# (d) In a single line of code, create a new vector, hw3d, that only contains the elements of hw.vector that are between 30 and 70
(hw3d <- (hw.vector > 30)+(hw.vector < 70))
# (d) In a single line of code, create a new vector, hw3d, that only contains the elements of hw.vector that are between 30 and 70
(hw3d <- (hw.vector > 30 & hw.vector < 70))
# (d) In a single line of code, create a new vector, hw3d, that only contains the elements of hw.vector that are between 30 and 70
(hw3d <- (hw.vector > 30 & hw.vector < 70)*hw.vector)
