hist(x,main="",axes=FALSE)}	 # creates histograms along the diagonal
)
#Rather than type all this in by hand each time, we can create a function on the fly:
MyPairs <- function(DAT){pairs(DAT,
panel = function(x,y){
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)
lines(lowess(x,y),col="darkgreen",lwd=2)},
diag.panel = function(x){
par(new=TRUE)
hist(x,main="",axes=FALSE)}	 )}
#Check that it works
MyPairs(Duncan)
#Check that it works
MyPairs(Duncan)
#7 ADVANCED SCATTERPLOTS OF THE DATA	---------------------
# Here is the regular old default plot using the pairs() function
pairs(Duncan)
# Let's see how we can modify the above to make a cooler graph. The rationale of the following syntax is not at all easy to see - don't worry too much right now about understanding this. It requires understanding the syntax for the "function" class - something we'll get to later in the course, but if you want to try, start with ?pairs and look at "panel" option
pairs(Duncan,
panel = function(x,y){ 			   # panel option requires input of class "function"
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)        # the red lines are linear best fits
lines(lowess(x,y),col="darkgreen",lwd=2)},   # the green lines are loess (smoothed) curves - useful for checking linearity
)
#And we can add new plots to the diagonals too using "diag.panel" option
pairs(Duncan,
panel = function(x,y){ 			   # panel option requires input of class "function"
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)        # the red lines are linear best fits
lines(lowess(x,y),col="darkgreen",lwd=2)},   # the green lines are loess (smoothed) curves - useful for checking linearity
diag.panel = function(x){			   # diag.panel option also requires input of class "function"
par(new=TRUE)			 # par(new=TRUE) disallows hist to clear the old graphs before drawing a new histogram
hist(x,main="",axes=FALSE)}	 # creates histograms along the diagonal
)
#Rather than type all this in by hand each time, we can create a function on the fly:
MyPairs <- function(DAT){pairs(DAT,
panel = function(x,y){
points(x,y)
abline(lm(y~x),col="red",lwd=2,lty=2)
lines(lowess(x,y),col="darkgreen",lwd=2)},
diag.panel = function(x){
par(new=TRUE)
hist(x,main="",axes=FALSE)}	 )}
#Check that it works
MyPairs(Duncan)
#HW Problem 1 	---------------------
# (a) Produce a histogram of the prestige variable that has 5 bins rather than 10. Title this histogram "HW1a histogram"
hist(Duncan$prestige, breaks = 9, main="Hw1a histogram")
#8 LINEAR REGRESSION	---------------------
# the function "lm" takes in an object of class "formula"
duncan.model.1 <- lm(prestige~income+education)
#7 ADVANCED SCATTERPLOTS OF THE DATA	---------------------
# Here is the regular old default plot using the pairs() function
pairs(Duncan)
#Check that it works
MyPairs(Duncan)
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
plot(abline(lm(income~type), col = "red"))
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
form.i.t = income~(as.numeric(type))
plot(form.i.t)
plot(abline(lm(form.i.t), col = "red"))
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
form.i.t = income~(as.numeric(type))
plot(form.i.t)
abline(lm(form.i.t)
abline(lm(form.i.t))
#HW Problem 1 	---------------------
# (a) Produce a histogram of the prestige variable that has 5 bins rather than 10. Title this histogram "HW1a histogram"
hist(Duncan$prestige, breaks = 9, main = "HW1a Histogram")
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(Duncan$type)
formula.t.i <- income~type_numeric
plot(type_numeric, income, main = "HW1b scatterplot")
abline(lm(formula.t.i),col="red",lwd=2,lty=2)
lines(lowess(formula.t.i),col="darkgreen",lwd=2)
# (c) What is your verbal interpretation for the loess (green) curve for income~type in the plot you did in HW1b (or in row 2 column 1 from the pairs() graph in #7 immediately above if you couldn't do HW1b)? Assign your answer (the character string) to an object "hw1c". You can read information on this dataset using ?Duncan
hw1c <- "After smoothing our line of best fit it is clear that each distinct category has seperate levels of income. Although, it is also clear that income may not necessarily operate as a linear function of (or is linearly predicted by) type of employment. Rather the smoothed line suggests our data may be behaving in a more quadratic manor."
# (d) How do you interpret the linear line (red) for type~income? Assign your answer to hw1d."
hw1d <- "The linear positive trend suggests that as the factors of employment increase, income might as well"
# (e) Run the following code:
my.x <- rnorm(1e4)			      # 1e4 = 10,000 random normal numbers
my.y <- sqrt(.3)*my.x + sqrt(.7)*rnorm(1e4)   # my.y is 60% x (r2 = .6) and 40% random noise
Huge.data <- data.frame(y=my.y,x=my.x)
# It is difficult to 'look' at large amounts of data. Run the following:
Huge.data 		# not helpful!!
plot(Huge.data)
# As you can tell, with large datasets it is difficult to see what is going on. Using the function "sample", figure out a way to plot a random subset (n=300) of the data so that you can see the data pattern better. Title this plot "HW1e scatterplot subset"
plot(Huge.data[sample(nrow(Huge.data), size = 300),])
# (f) Now take four random samples of the data, each of size=300. Plot each in one of the panes of a 2x2 plot. Title each one "HW1f plot X" where X is 1, 2, 3, or 4 (in order). Remember the par(mfrow=) option to change R's default plotting behavior!
par(mfrow=c(2,2))
plot(Huge.data[sample(nrow(Huge.data), size = 300),], main = "HW1f plot 1")
plot(Huge.data[sample(nrow(Huge.data), size = 300),], main = "HW1f plot 2")
plot(Huge.data[sample(nrow(Huge.data), size = 300),], main = "HW1f plot 3")
plot(Huge.data[sample(nrow(Huge.data), size = 300),], main = "HW1f plot 4")
#8 LINEAR REGRESSION	---------------------
# the function "lm" takes in an object of class "formula"
duncan.model.1 <- lm(prestige~income+education)
# notice that your assign the output to be an object (duncan.model.1 in this case)
duncan.model.1
# class is "lm" - automatically assigned by the function "lm"
info(duncan.model.1)
# summary deals with class "lm" as below; both predictors are highly significant: for every $1K gain in income, prestige tends to increase by .5987
summary(duncan.model.1)
# Looking at your data is crucial. Let's use the function we wrote above
MyPairs(Duncan[,2:4])
# check out all the goodies we have access to...
names(duncan.model.1)
#can you figure out how to look at the residuals of the model?
duncan.model.1$residuals			# OK - I'll tell you. This works because mode(duncan.model.1) = list
# what's the most negative residual?
(d.min <- min(duncan.model.1$residuals))
# can you understand this syntax? Shows which profession has the least prestige given its income & educational level.
Duncan[duncan.model.1$residuals==d.min,]
# here are some default methods of graphing the linear model; let's get more specific...
plot(duncan.model.1) #hit your RETURN key IN THE CONSOLE to forward through the various plots
#9 REGRESSION DIAGNOSTICS - ASSESSING NORMALITY	---------------------
# qq.plot is a function from "car" package; are the resids normal?
qqPlot(duncan.model.1$residuals)
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(Duncan$type)
formula.t.i <- income~type_numeric
plot(type_numeric, income, main = "HW1b scatterplot")
abline(lm(formula.t.i),col="red",lwd=2,lty=2)
#HW Problem 1 	---------------------
# (a) Produce a histogram of the prestige variable that has 5 bins rather than 10. Title this histogram "HW1a histogram"
hist(Duncan$prestige, breaks = 9, main = "HW1a Histogram")
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(Duncan$type)
formula.t.i <- income~type_numeric
plot(type_numeric, income, main = "HW1b scatterplot")
abline(lm(formula.t.i),col="red",lwd=2,lty=2)
par(op)
#HW Problem 1 	---------------------
# (a) Produce a histogram of the prestige variable that has 5 bins rather than 10. Title this histogram "HW1a histogram"
hist(Duncan$prestige, breaks = 9, main = "HW1a Histogram")
# (b) use the plot(), abline(), and lines() functions to create a single scatterplot (just one, not the matrix of them) exactly like the one in row 2 column 1 from the pairs() graph in #7 immediately above. Title this "HW1b scatterplot". Note that you'll need to change the mode of the variable "type" to be numeric on the fly. Also note that pairs() (which only create matrices of scatterplots) and points() (which only adds points to existing plots) won't accomplish what you want. see ?plot to figure out how to make a title on the figure.
type_numeric <- as.numeric(Duncan$type)
formula.t.i <- income~type_numeric
plot(type_numeric, income, main = "HW1b scatterplot")
abline(lm(formula.t.i),col="red",lwd=2,lty=2)
lines(lowess(formula.t.i),col="darkgreen",lwd=2)
getwd()
library(readr)
Prim2008 <- read_csv("Desktop/psyc5541/jrl/hw3/Prim2008.csv")
View(Prim2008)
install.packages("tidyverse")
Duncan$type
library(readxl)
PSYC3111_Fall_2020_Data <- read_excel("Downloads/PSYC3111_Fall_2020_Data.xlsx")
View(PSYC3111_Fall_2020_Data)
data <- read_excel("Downloads/PSYC3111_Fall_2020_Data.xlsx")
View(data)
head(data)
attach(data)
#Mean for attSCALE
mean(attSCALE)
#standard deviation for attSCALE
sd(attSCALE)
#Correlation between AGE and normSCALE
cor.test(age, normsSCALE, alternative="two.sided")
#t-test for pbcSCALE by gender (assume 2-tailed, unpaired)
t.test(pbcSCALE~gender, var.equal=TRUE, paired=F)
#Cronbach's alpha for attitudes_items (all the questions that make up the attitudes scale)
#Search for and install the "psych" library using the 'install' button in the
#bottom right panel. Wait for the library to install. Once it installs type:
library(psych)
#'figure out' the column # of the questions that 'make up' the attitudes scale:
names(PSYC3111_Fall_2020_Data)
#Make a new variable that is 'made up' of only the responses from those
#questions that make up the attitudes scale (i.e. only those columns that start
#with 'att'). We will call it 'attitudes_items':
attitudes_items = data[, 21:27]
#Calculate the Cronbach's Alpha (we want the 'raw alpha')
alpha(attitudes_items)
#age range
range(age)
#average age
mean(age)
#standard deviation of age
sd(age)
#number of males and females
table(gender)
#cronbach's alpha for your scale (or scales)
#'figure out' the column # of the questions that 'make up' the attitudes scale:
names(PSYC3111_Fall_2020_Data)
#cronbach's alpha for your scale (or scales)
#'figure out' the column # of the questions that 'make up' the attitudes scale:
names(data)
#for the attitudes scale
attitudes_items = data[, 21:27]
#for the perceived behavioral control scale
pbc_items = data[, 13:20]
#for the subjective norms scale
norms_items = data[, 7:12]
#for the intentions scale scale
intentions_items = data[, 4:6]
#Calculate the Cronbach's Alpha (we want the 'raw alpha')
alpha(attitudes_items)
#or
alpha(pbc_items)
#if both of your variables are continuous (i.e., if you are running a correlation)
#*note: replace 'variable1 1' and 'variable 2' with your variable names:
mean(variable1)
#Calculate the Cronbach's Alpha (we want the 'raw alpha')
alpha(attitudes_items)
#or
alpha(pbc_items)
#... etc.
alpha(norms_items)
alpha(intentions_items)
#a) Create a new folder somewhere on your computer and make this folder your working directory for this session
setwd("~/Desktop/psyc5541/jrl/hw5")
#2 VECTORS ---------------------
# a) Create a vector, length=500, of random, uniformly distributed numbers between -1 and 1. Assign this to an object called "rand.unif"
rand.unif <- runif(500, max = 1, min = -1)
hist(rand.unif)
# b) Create another vector of length=2000 of random, normally distributed numbers (mean=100, sd=15). Assign this to an object called "rand.norm"
rand.norm <- rnorm(2000, mean = 100, sd = 15)
hist(rand.norm)
# c) Create a long vector of length 2500 whose first 500 elements are from rand.unif and last 2000 are from rand.norm.  Assign this to an object called "long.vector"
long.vector <- c(rand.unif,rand.norm)
#d) What are the dimensions of "long.vector"? (Hint: dim() doesn't give you what you want for vectors)
str(long.vector)
#e) Check that you've created the vector properly; run summary statistics on the first 500 elements. Then do the same for the last 2000.
summary(long.vector[1:500]);summary(long.vector[105:2000])
#3 MATRICES & WRITING FILES ---------------------
#a) Use the object "long.vector" to create a matrix of 500 rows and 5 columns. The first column is rand.unif. The next four are rand.norm.  Assign this object to be called "sim.matrix"
sim.matrix <- matrix(long.vector, nrow = 500, ncol = 5)
#b) Use the object "long.vector" to create another matrix of 500 rows and 5 columns. The first 100 rows should be rand.unif. The next 400 rows are rand.norm.  Assign this object to be called "sim.matrix.2"
sim.matrix.2 <- matrix(long.vector, nrow = 500, ncol = 5, byrow = 1)
#c) Write the matrix "sim.matrix" out to your working directory as a comma delimitted file. Do NOT include column or row names. Call this file "My.Simulated.R.Matrix.txt"
write.table(sim.matrix, row.names = F, col.names = F, file = "My.Simulated.R.Matrix.txt")
#d) Look at "My.Simulated.R.Matrix.txt" using your Terminal (e.g., the second tab next to Console here in Rstudio). Does it look as expected?
#yes
#e) Let's say we want to round all the elements to 3 decimal places. Write out "sim.matrix" again as a comma delimitted file, calling it "My.Sim2.txt", but with all elements rounded to 3 decimal places
write.table(round(sim.matrix, digits = 3), row.names = F, col.names = F, file = "My.Sim2.txt")
#4 WORKING DIRECTORY, LISTING FILES, & READING FILES  ---------------------
#a) List the current files currently in your working directory
list.files()
# b) Create a character vector called "myfiles" that contains the names of all files in your working directory
myfiles <- list.files()
# c) Using the == operator, create a logical (TRUE/FALSE) vector that is TRUE when myfiles== "My.Simulated.R.Matrix.txt". Assign this to an object called "file.index"
file.index <- myfiles== "My.Simulated.R.Matrix.txt"
#d) Using "file.index" as an index, extract the element of "myfiles" that is equal to "My.Simulated.R.Matrix.txt".  Assign this element to an object called "file.name"
file.name <- myfiles[file.index]
#e) Here is an idea that we'll use more as the course progresses. Try to use the object "file.name"  within the read.table function, in order to read the "My.Simulated.R.Matrix.txt" file into R. Assign this to a new object called "Read.Mat"
Read.Mat <- read.table(file.name, header = F)
#f) What is the class of Read.Mat? What are its dimensions?
str(Read.Mat)
#g) Use the head function to look at the first 10 rows of Read.Mat
head(Read.Mat, n =10)
#5 RECODING   ---------------------
#a) Use the "colnames" function to rename the columns of Read.Mat. 1st column: "Level", 2nd column: "Y", 3rd column "Sex", 4th: "X1", 5th: "X2"
colnames(Read.Mat) <- c("Level","Y","Sex","X1","X2")
#b) Recode "Levels" to be an ordered factor, which is -1 if < -.333, 0 if -.3329 < "Level" < .3329  and 1 if > .333. Hint: recode to an ordered factor *after* changing the values.
Read.Mat$Level2 <- (Read.Mat$Level< -.333)*-1 +  (Read.Mat$Level> .333)*1
Read.Mat[Read.Mat$Level < -.333,"Level"] <- -1;
Read.Mat[Read.Mat$Level > -.3329 & Read.Mat$Level < .3329, "Level"] <- 0
Read.Mat[Read.Mat$Level > .333,"Level"] <- 1
Read.Mat$Level
Read.Mat$Level <- factor(x = Read.Mat$Level, labels = c(-1,0,1))
str(Read.Mat)
#c) Create a new variable in Read.Mat, "Female", that is 0 if below the mean of Sex and 1 if above the mean of Sex
Read.Mat$Female <- (Read.Mat$Sex > mean(Read.Mat$Sex))*1
Read.Mat$Female
#6 BASIC DESCRIPTIVES & SUBSETTING  ---------------------
#a) Find the mean Y score for females and the mean Y score for males
mean(Read.Mat[Read.Mat$Female == 0,"Y"])
mean(Read.Mat[Read.Mat$Female == 1,"Y"])
tapply(Read.Mat$Y,Read.Mat$Female,mean,na.rm=TRUE)
#b) Using the function tapply(), find the standard deviations of Y for the three levels of the "Level" factor. Place this in a 3-element vector entitled "SD.Levels"
(SD.Levels <- tapply(Read.Mat$Y, Read.Mat$Level, sd))
#c) Using the apply() function, create another vector called "ind.means" that is the mean for each individual of Y, X1, and X2
ind.means <- apply(Read.Mat[c(2,4:5)], 1, mean)
#d) Cre                    ate a subset of Read.Mat this only includes rows 1, 3, 5, 7, 8, 9, & 10, and that only includes columns 1, 3, 4. Assign this to a new object called Read.Mat.subset1
Read.Mat.subset.1 <- Read.Mat[c(1,3,5,7:10),c(1,3:4)]
#e) Create a subset of Read.Mat this only includes females. Assign this to a new object called Read.Mat.female
Read.Mat.female <- Read.Mat[Read.Mat$Female == 1,]
#f) Create a subset of Read.Mat that only includes columns Y, X1, and X2 and only includes rows where the mean of Y, X1, and X2 is greater than 105. Assign this to a new object called "Read.Mat.105"
cols <- c("Y","X1","X2")
rows <- apply(Read.Mat[c("Y","X1","X2")], 1, mean) > 105
Read.Mat.105 <- Read.Mat[rows,cols]
#7 PLOTTING AND FOR LOOPS  ---------------------
#Create a 3x3 plot using a for loop. Each quadrant of the plot is the scatterplot between X1 & Y from a random subset of rows:
#   The top row (3 plots) plots X & Y for three different randomly selected rows of size = 10
#   The 2nd row (3 plots) plots X & Y for three different randomly selected rows of size = 30
#   The 3rd row (3 plots) plots X & Y for three different randomly selected rows of size = 150
#   Make sure to create best fit lines for each plot. Finally, after you've plotted these, change R's graphing options back to how they were beforehand. This one's tough but you can do it. Good luck!!
par(mfrow = c(3,3))
for (i in c(10,30,150)){
Y <- sample(Read.Mat$Y,i)
X <- sample(Read.Mat$X1,i)
for(i in 1:3){
plot(Y~X)
abline(lm(Y~X))
}
}
#8 REGRESSION   ---------------------
#a) Run a linear regression of X1 & X2 & Levels on Y. Assign this to an object "lin.mod"
lin.mod <- lm(Y ~ X1 + X2 + Levels, data = Read.Mat)
#b) Get the summary of lin.mod. Assign this summary to be "lin.mod.summary"
lin.mod.summary <- summary(lin.mod)
#c) What are the effects being tested by the two Levels contrasts? Can you interpret them?
contrasts(lin.mod)
# a) IF YOUR LAST NAME BEGINS WITH A - H, YOU WILL CHECK THE TYPE I ERRORS. RUN THIS CODE TO CREATE THE POPULATION DATA
x <- rnorm(50000)
out <- (runif(50000)<.10)*rnorm(5000,sd=4)   # 10 % of data is rnorm with sd = 3, rest is 0
x2 <- x+out    # roughly 10% of data has a chance of being an outlier - i.e., this data is heavy tailed
y <- rnorm(50000)  # the y variable; unrelated to the x variables
pop.null <- data.frame(y=y,x.norm=x,x.outlier=x2)  #we've created a population where there is no effect, but outliers exist
pop.null[1:15,]   # look at the data
# b) IF YOUR LAST NAME BEGINS WITH I - Z, YOU WILL CHECK THE TYPE II ERRORS. RUN THIS CODE TO CREATE THE POPULATION DATA
x <- rnorm(50000)
out <- (runif(50000)<.10)*rnorm(5000,sd=4)   # 10 % of data is rnorm with sd = 3, rest is 0
x2 <- x+out    # roughly 10% of data has a chance of being an outlier - i.e., this data is heavy tailed
y <- sqrt(.15)*x + sqrt(.85)*rnorm(50000)  # x accounts for 15% of the variance in y
pop.alt <- data.frame(y=y,x.norm=x,x.outlier=x2)  #we've created a population where there IS an effect, and outliers exist
pop.alt[1:15,]   # look at the data
# c) Now run this to set up the matrix that we'll store our stats of interest in each round:
results.matrix <- matrix(0,nrow=1000,ncol=6)
dimnames(results.matrix) <- list(paste("run",1:1000),c("beta.no","se.no","p.no","beta.outlier","se.outlier","p.outlier"))
# d) Now it's up to you. You need to do the following things: 1) We're going to do 1000 iterations. For each iteration, randomly sample 50 rows from your population. Run two linear regressions on this subsample. One is Y~x.norm and the other Y~x.outlier. Store the statistics of interest in the appropriate row of results.matrix. At the end, calculate the type I errors for the two alternative realities if in group 1, and the type II errors if in group 2. If you want to get fancy, you might also create histograms of the t-values from the two realities. ALSO, if you want, go ahead and do both type I and type II error rates - once you've done one, the other is easy.
# d) Now it's up to you. You need to do the following things: 1) We're going to do 1000 iterations. For each iteration, randomly sample 50 rows from your population. Run two linear regressions on this subsample. One is Y~x.norm and the other Y~x.outlier. Store the statistics of interest in the appropriate row of results.matrix. At the end, calculate the type I errors for the two alternative realities if in group 1, and the type II errors if in group 2. If you want to get fancy, you might also create histograms of the t-values from the two realities. ALSO, if you want, go ahead and do both type I and type II error rates - once you've done one, the other is easy.
#to get type-I errors, you want the proportion of tests that are significant (p < .05) in the null population (group 1)
# HOWEVER, before you start, *think* about the simulation. What will its outcome be? Provide your answer before you begin here:
#c) What are the effects being tested by the two Levels contrasts? Can you interpret them?
contrasts(lin.mod)
#8 REGRESSION   ---------------------
#a) Run a linear regression of X1 & X2 & Levels on Y. Assign this to an object "lin.mod"
lin.mod <- lm(Y ~ X1 + X2 + Levels, data = Read.Mat)
#b) Get the summary of lin.mod. Assign this summary to be "lin.mod.summary"
lin.mod.summary <- summary(lin.mod)
#1 R'S WORKING DIRECTORY ---------------------
#Read in a script I wrote that contains handy functions like info(x), LS(), and look(x), The function source() simply reads in another R script and runs every line of code
source("http://www.matthewckeller.com/R.Class/KellerScript2.R")
#a) Create a new folder somewhere on your computer and make this folder your working directory for this session
setwd("~/Desktop/psyc5541/jrl/hw5")
#2 VECTORS ---------------------
# a) Create a vector, length=500, of random, uniformly distributed numbers between -1 and 1. Assign this to an object called "rand.unif"
rand.unif <- runif(500, max = 1, min = -1)
hist(rand.unif)
# b) Create another vector of length=2000 of random, normally distributed numbers (mean=100, sd=15). Assign this to an object called "rand.norm"
rand.norm <- rnorm(2000, mean = 100, sd = 15)
hist(rand.norm)
# c) Create a long vector of length 2500 whose first 500 elements are from rand.unif and last 2000 are from rand.norm.  Assign this to an object called "long.vector"
long.vector <- c(rand.unif,rand.norm)
#d) What are the dimensions of "long.vector"? (Hint: dim() doesn't give you what you want for vectors)
str(long.vector)
#e) Check that you've created the vector properly; run summary statistics on the first 500 elements. Then do the same for the last 2000.
summary(long.vector[1:500]);summary(long.vector[105:2000])
#3 MATRICES & WRITING FILES ---------------------
#a) Use the object "long.vector" to create a matrix of 500 rows and 5 columns. The first column is rand.unif. The next four are rand.norm.  Assign this object to be called "sim.matrix"
sim.matrix <- matrix(long.vector, nrow = 500, ncol = 5)
#b) Use the object "long.vector" to create another matrix of 500 rows and 5 columns. The first 100 rows should be rand.unif. The next 400 rows are rand.norm.  Assign this object to be called "sim.matrix.2"
sim.matrix.2 <- matrix(long.vector, nrow = 500, ncol = 5, byrow = 1)
#c) Write the matrix "sim.matrix" out to your working directory as a comma delimitted file. Do NOT include column or row names. Call this file "My.Simulated.R.Matrix.txt"
write.table(sim.matrix, row.names = F, col.names = F, file = "My.Simulated.R.Matrix.txt")
#d) Look at "My.Simulated.R.Matrix.txt" using your Terminal (e.g., the second tab next to Console here in Rstudio). Does it look as expected?
#yes
#e) Let's say we want to round all the elements to 3 decimal places. Write out "sim.matrix" again as a comma delimitted file, calling it "My.Sim2.txt", but with all elements rounded to 3 decimal places
write.table(round(sim.matrix, digits = 3), row.names = F, col.names = F, file = "My.Sim2.txt")
#4 WORKING DIRECTORY, LISTING FILES, & READING FILES  ---------------------
#a) List the current files currently in your working directory
list.files()
# b) Create a character vector called "myfiles" that contains the names of all files in your working directory
myfiles <- list.files()
# c) Using the == operator, create a logical (TRUE/FALSE) vector that is TRUE when myfiles== "My.Simulated.R.Matrix.txt". Assign this to an object called "file.index"
file.index <- myfiles== "My.Simulated.R.Matrix.txt"
#d) Using "file.index" as an index, extract the element of "myfiles" that is equal to "My.Simulated.R.Matrix.txt".  Assign this element to an object called "file.name"
file.name <- myfiles[file.index]
#e) Here is an idea that we'll use more as the course progresses. Try to use the object "file.name"  within the read.table function, in order to read the "My.Simulated.R.Matrix.txt" file into R. Assign this to a new object called "Read.Mat"
Read.Mat <- read.table(file.name, header = F)
#f) What is the class of Read.Mat? What are its dimensions?
str(Read.Mat)
#g) Use the head function to look at the first 10 rows of Read.Mat
head(Read.Mat, n =10)
#5 RECODING   ---------------------
#a) Use the "colnames" function to rename the columns of Read.Mat. 1st column: "Level", 2nd column: "Y", 3rd column "Sex", 4th: "X1", 5th: "X2"
colnames(Read.Mat) <- c("Level","Y","Sex","X1","X2")
#b) Recode "Levels" to be an ordered factor, which is -1 if < -.333, 0 if -.3329 < "Level" < .3329  and 1 if > .333. Hint: recode to an ordered factor *after* changing the values.
Read.Mat$Level2 <- (Read.Mat$Level< -.333)*-1 +  (Read.Mat$Level> .333)*1
Read.Mat[Read.Mat$Level < -.333,"Level"] <- -1;
Read.Mat[Read.Mat$Level > -.3329 & Read.Mat$Level < .3329, "Level"] <- 0
Read.Mat[Read.Mat$Level > .333,"Level"] <- 1
Read.Mat$Level
Read.Mat$Level <- factor(x = Read.Mat$Level, labels = c(-1,0,1))
str(Read.Mat)
#c) Create a new variable in Read.Mat, "Female", that is 0 if below the mean of Sex and 1 if above the mean of Sex
Read.Mat$Female <- (Read.Mat$Sex > mean(Read.Mat$Sex))*1
Read.Mat$Female
#6 BASIC DESCRIPTIVES & SUBSETTING  ---------------------
#a) Find the mean Y score for females and the mean Y score for males
mean(Read.Mat[Read.Mat$Female == 0,"Y"])
mean(Read.Mat[Read.Mat$Female == 1,"Y"])
tapply(Read.Mat$Y,Read.Mat$Female,mean,na.rm=TRUE)
#b) Using the function tapply(), find the standard deviations of Y for the three levels of the "Level" factor. Place this in a 3-element vector entitled "SD.Levels"
(SD.Levels <- tapply(Read.Mat$Y, Read.Mat$Level, sd))
#c) Using the apply() function, create another vector called "ind.means" that is the mean for each individual of Y, X1, and X2
ind.means <- apply(Read.Mat[c(2,4:5)], 1, mean)
#d) Cre                    ate a subset of Read.Mat this only includes rows 1, 3, 5, 7, 8, 9, & 10, and that only includes columns 1, 3, 4. Assign this to a new object called Read.Mat.subset1
Read.Mat.subset.1 <- Read.Mat[c(1,3,5,7:10),c(1,3:4)]
#e) Create a subset of Read.Mat this only includes females. Assign this to a new object called Read.Mat.female
Read.Mat.female <- Read.Mat[Read.Mat$Female == 1,]
#f) Create a subset of Read.Mat that only includes columns Y, X1, and X2 and only includes rows where the mean of Y, X1, and X2 is greater than 105. Assign this to a new object called "Read.Mat.105"
cols <- c("Y","X1","X2")
rows <- apply(Read.Mat[c("Y","X1","X2")], 1, mean) > 105
Read.Mat.105 <- Read.Mat[rows,cols]
#7 PLOTTING AND FOR LOOPS  ---------------------
#Create a 3x3 plot using a for loop. Each quadrant of the plot is the scatterplot between X1 & Y from a random subset of rows:
#   The top row (3 plots) plots X & Y for three different randomly selected rows of size = 10
#   The 2nd row (3 plots) plots X & Y for three different randomly selected rows of size = 30
#   The 3rd row (3 plots) plots X & Y for three different randomly selected rows of size = 150
#   Make sure to create best fit lines for each plot. Finally, after you've plotted these, change R's graphing options back to how they were beforehand. This one's tough but you can do it. Good luck!!
par(mfrow = c(3,3))
for (i in c(10,30,150)){
Y <- sample(Read.Mat$Y,i)
X <- sample(Read.Mat$X1,i)
for(i in 1:3){
plot(Y~X)
abline(lm(Y~X))
}
}
#8 REGRESSION   ---------------------
#a) Run a linear regression of X1 & X2 & Levels on Y. Assign this to an object "lin.mod"
lin.mod <- lm(Y ~ X1 + X2 + Levels, data = Read.Mat)
View(Read.Mat)
#8 REGRESSION   ---------------------
#a) Run a linear regression of X1 & X2 & Levels on Y. Assign this to an object "lin.mod"
lin.mod <- lm(Y ~ X1 + X2 + Level, data = Read.Mat)
#b) Get the summary of lin.mod. Assign this summary to be "lin.mod.summary"
lin.mod.summary <- summary(lin.mod)
#c) What are the effects being tested by the two Levels contrasts? Can you interpret them?
contrasts(lin.mod)
#8 REGRESSION   ---------------------
#a) Run a linear regression of X1 & X2 & Levels on Y. Assign this to an object "lin.mod"
lin.mod <- lm(Y ~ X1 + X2 + Level, data = Read.Mat)
#b) Get the summary of lin.mod. Assign this summary to be "lin.mod.summary"
lin.mod.summary <- summary(lin.mod)
#c) What are the effects being tested by the two Levels contrasts? Can you interpret them?
contrasts(lin.mod)
lin.mod.summary
lin.mod$coefficients
#c) What are the effects being tested by the two Levels contrasts? Can you interpret them?
contrasts(Read.Mat$Level)
#f) Add two new columns to Read.Mat. The first column is "fitted" which are the fitted values (y-hats) of lin.mod, and the second new column is "resids" which are the residuals of lin.mod. See ?fitted and ?resid.
Read.Mat$fitted <- lin.mod$fitted.values
Read.Mat$resids <- lin.mod$residuals
Read.Mat
#g) create a plot that is residuals (y-axis) plotted against fitted values (x-axis). Is there any concern of heteroscedasticity?
plot(Read.Mat$resids~Read.Mat$fitted)
par(op)
#8 REGRESSION   ---------------------
#a) Run a linear regression of X1 & X2 & Levels on Y. Assign this to an object "lin.mod"
lin.mod <- lm(Y ~ X1 + X2 + Level, data = Read.Mat)
#b) Get the summary of lin.mod. Assign this summary to be "lin.mod.summary"
lin.mod.summary <- summary(lin.mod)
#c) What are the effects being tested by the two Levels contrasts? Can you interpret them?
contrasts(Read.Mat$Level)
#d) What is the mode of "lin.mod.summary"?
mode(lin.mod.summary)
#e) What are the names of the objects in "lin.mod.summary"?
names(lin.mod.summary)
#f) Add two new columns to Read.Mat. The first column is "fitted" which are the fitted values (y-hats) of lin.mod, and the second new column is "resids" which are the residuals of lin.mod. See ?fitted and ?resid.
Read.Mat$fitted <- lin.mod$fitted.values
Read.Mat$resids <- lin.mod$residuals
#g) create a plot that is residuals (y-axis) plotted against fitted values (x-axis). Is there any concern of heteroscedasticity?
plot(Read.Mat$resids~Read.Mat$fitted)
?matrix
#h) Create a matrix called "reg.info" and place the intercept and slopes for lin.mod in the first column of "reg.info" and place the p-values in the second column of "reg.info". Hint: you can grab objects from lin.mod.summary using "$" - same as in data.frames (indeed, data.frames ARE lists). Alternatively, see ?coef.
reg.info <- matrix(lin.mod.summary$coefficients, lin.mod.summary$coefficients, ncol = 2)
reg.info
lin.mod.summary
lin.mod$contrasts
lin.mod$model
lin.mod$effects
lin.mod.summary
lin.mod.summary$call
lin.mod.summary$terms
lin.mod.summary$coefficients
lin.mod.summary$coefficient[0]
lin.mod.summary$coefficients
lin.mod.summary$coefficients[Estimate]
#h) Create a matrix called "reg.info" and place the intercept and slopes for lin.mod in the first column of "reg.info" and place the p-values in the second column of "reg.info". Hint: you can grab objects from lin.mod.summary using "$" - same as in data.frames (indeed, data.frames ARE lists). Alternatively, see ?coef.
reg.info <- matrix(lin.mod.summary$coefficients, ncol = 2)
reg.info
#c) What are the effects being tested by the two Levels contrasts? Can you interpret them?
contrasts(Read.Mat$Level)
head(Read.Mat)
#h) Create a matrix called "reg.info" and place the intercept and slopes for lin.mod in the first column of "reg.info" and place the p-values in the second column of "reg.info". Hint: you can grab objects from lin.mod.summary using "$" - same as in data.frames (indeed, data.frames ARE lists). Alternatively, see ?coef.
reg.info <- matrix(lin.mod.summary$coefficients[,c(1,4)], ncol = 2)
#g) create a plot that is residuals (y-axis) plotted against fitted values (x-axis). Is there any concern of heteroscedasticity?
plot(Read.Mat$fitted,Read.Mat$resids)
#g) create a plot that is residuals (y-axis) plotted against fitted values (x-axis). Is there any concern of heteroscedasticity?
plot(Read.Mat$resids~Read.Mat$fitted)
# b) IF YOUR LAST NAME BEGINS WITH I - Z, YOU WILL CHECK THE TYPE II ERRORS. RUN THIS CODE TO CREATE THE POPULATION DATA
x <- rnorm(50000)
out <- (runif(50000)<.10)*rnorm(5000,sd=4)   # 10 % of data is rnorm with sd = 3, rest is 0
x2 <- x+out    # roughly 10% of data has a chance of being an outlier - i.e., this data is heavy tailed
y <- sqrt(.15)*x + sqrt(.85)*rnorm(50000)  # x accounts for 15% of the variance in y
pop.alt <- data.frame(y=y,x.norm=x,x.outlier=x2)  #we've created a population where there IS an effect, and outliers exist
pop.alt[1:15,]   # look at the data
# c) Now run this to set up the matrix that we'll store our stats of interest in each round:
results.matrix <- matrix(0,nrow=1000,ncol=6)
dimnames(results.matrix) <- list(paste("run",1:1000),c("beta.no","se.no","p.no","beta.outlier","se.outlier","p.outlier"))
?sample
pop.alt
results.matrix
View(pop.alt)
View(pop.null)
sample(pop.alt, 50)
